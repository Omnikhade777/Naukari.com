generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  password         String
  resetToken       String?
  resetTokenExpiry DateTime?
  jobs             Job[]
}

model Job {
  id             String        @id @default(uuid())
  title          String
  description    String
  postedAt       DateTime      @default(now()) 
  deadline       DateTime
  isActive       Boolean       @default(true)
  adminId        String
  skillsrequired String[]
  salary         String?
  location       String?
  jobtype        String?
  admin          Admin         @relation(fields: [adminId], references: [id])
  savedjobs      savedjobs[]    
  applications   Application[]
}

model Candidate {
  id               String              @id @default(uuid())
  name             String
  email            String              @unique
  password         String
  resetToken       String?
  resetTokenExpiry DateTime?
  applications     Application[]
  saved            savedjobs[]
  profile          CandidateProfile?
}

model CandidateProfile {
  id            String     @id @default(uuid())
  profielphoto  String
  description   String
  userId        String     @unique
  user          Candidate  @relation(fields: [userId], references: [id])
  skills        String[]
  location      String?
  exprerience   Json?
  education     Json?
}

model Application {
  id           String              @id @default(uuid())
  candidateId  String
  candidate    Candidate           @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobId        String
  job          Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)
  appliedAt    DateTime            @default(now())
  status       ApplicationStatus   @default(PENDING)

  @@unique([candidateId, jobId])
}

model savedjobs {
  id           String     @id @default(uuid())
  candidateId  String
  candidate    Candidate  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobId        String
  job          Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  savedAt      DateTime   @default(now())
  @@unique([candidateId, jobId])
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
